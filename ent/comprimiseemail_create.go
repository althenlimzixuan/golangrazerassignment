// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/ent/comprimiseemail"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ComprimiseEmailCreate is the builder for creating a ComprimiseEmail entity.
type ComprimiseEmailCreate struct {
	config
	mutation *ComprimiseEmailMutation
	hooks    []Hook
}

// SetEmail sets the "Email" field.
func (cec *ComprimiseEmailCreate) SetEmail(s string) *ComprimiseEmailCreate {
	cec.mutation.SetEmail(s)
	return cec
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (cec *ComprimiseEmailCreate) SetNillableEmail(s *string) *ComprimiseEmailCreate {
	if s != nil {
		cec.SetEmail(*s)
	}
	return cec
}

// Mutation returns the ComprimiseEmailMutation object of the builder.
func (cec *ComprimiseEmailCreate) Mutation() *ComprimiseEmailMutation {
	return cec.mutation
}

// Save creates the ComprimiseEmail in the database.
func (cec *ComprimiseEmailCreate) Save(ctx context.Context) (*ComprimiseEmail, error) {
	var (
		err  error
		node *ComprimiseEmail
	)
	cec.defaults()
	if len(cec.hooks) == 0 {
		if err = cec.check(); err != nil {
			return nil, err
		}
		node, err = cec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComprimiseEmailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cec.check(); err != nil {
				return nil, err
			}
			cec.mutation = mutation
			node, err = cec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cec.hooks) - 1; i >= 0; i-- {
			mut = cec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cec *ComprimiseEmailCreate) SaveX(ctx context.Context) *ComprimiseEmail {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cec *ComprimiseEmailCreate) defaults() {
	if _, ok := cec.mutation.Email(); !ok {
		v := comprimiseemail.DefaultEmail
		cec.mutation.SetEmail(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *ComprimiseEmailCreate) check() error {
	if _, ok := cec.mutation.Email(); !ok {
		return &ValidationError{Name: "Email", err: errors.New("ent: missing required field \"Email\"")}
	}
	return nil
}

func (cec *ComprimiseEmailCreate) sqlSave(ctx context.Context) (*ComprimiseEmail, error) {
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cec *ComprimiseEmailCreate) createSpec() (*ComprimiseEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &ComprimiseEmail{config: cec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comprimiseemail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comprimiseemail.FieldID,
			},
		}
	)
	if value, ok := cec.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comprimiseemail.FieldEmail,
		})
		_node.Email = value
	}
	return _node, _spec
}

// ComprimiseEmailCreateBulk is the builder for creating many ComprimiseEmail entities in bulk.
type ComprimiseEmailCreateBulk struct {
	config
	builders []*ComprimiseEmailCreate
}

// Save creates the ComprimiseEmail entities in the database.
func (cecb *ComprimiseEmailCreateBulk) Save(ctx context.Context) ([]*ComprimiseEmail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*ComprimiseEmail, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComprimiseEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *ComprimiseEmailCreateBulk) SaveX(ctx context.Context) []*ComprimiseEmail {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
