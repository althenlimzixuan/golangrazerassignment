// Code generated by entc, DO NOT EDIT.

package ent

import (
	"hello/ent/comprimiseemail"
	"hello/ent/schema"
	"hello/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	comprimiseemailFields := schema.ComprimiseEmail{}.Fields()
	_ = comprimiseemailFields
	// comprimiseemailDescEmail is the schema descriptor for Email field.
	comprimiseemailDescEmail := comprimiseemailFields[0].Descriptor()
	// comprimiseemail.DefaultEmail holds the default value on creation for the Email field.
	comprimiseemail.DefaultEmail = comprimiseemailDescEmail.Default.(string)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[0].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
}
